[] Main motive is to create Spring cloud config server which is Git backed.

[] Spring cloud config server can store/access configuration files to Git. So for that we need a Git repository 
   so we will create a Git repository locally or we can also use online Git repository.
   
[] Steps to create Git repository locally:
   1. Open command prompt.
   2. Choose location by using: cd FolderAddress and the same location/address must be given in application.properties
   3. Type command [git init] and press enter.
   4. In same folder we are making student-service file.
   5. Type command [git status] to display the state of working directory.
   6. Type command [git add .] and press enter.
   7. Commit the file using [git commit -m "description"] to save the changes to the local repository. 
   8. You can access all the properties through browser using:
   	  http://localhost:8086/student-service/default	: for default
   	  http://localhost:8086/student-service/dev : for dev
   	  http://localhost:8086/student-service/prod : for prod
   	  
   	  Similarly for course-service.
   	  
   	  
[] For accessing web services using config server from Postman, we can use  
   http://localhost:8086/student-service/default
   http://localhost:8086/student-service/dev
   http://localhost:8086/student-service/prod and similarly for course-service.
   
   Note: Config server will access the details using APPLICATION_NAME.  
   
[] To refresh all the changes made in Config Sever while calling API.
   () Add actuator dependency.
   () Add @RefreshScope to the controller.
   () Call API using [http://localhost:8084/actuator/refresh](Note is is POST method) but it will give you response like:
      	{
      	"timestamp": "2023-05-20T21:05:48.3094486",
      	"message": "No endpoint GET /actuator/refresh.",
      	"details": "uri=/actuator/refresh"
      	}
      This is because "/refresh" end point is not enabled by default. We have to enable it.
   () To enable it add actuator dependency:
      	<!-- Spring Boot Starter Actuator (To achieve @RefreshScope)-->
      	<!-- Actuator is mainly used to expose operational information about running application like health, metrics, info, dump, env, refresh etc.-->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>	
    () Add the given properties in application.properties.
   	#Enable spring boot actuator endpoints
	management.endpoints.web.exposure.include=*
    () Now add @RefreshScope to given controller.
    () Again call API using [http://localhost:8084/actuator/refresh](Note is is POST method) but it will give you response like:
    	[
    	"config.client.version",
    	"message"
	]
    () Now again call [http://localhost:8088/studentDetails/message] for StudentUnit and similarly CourseUnit and you will get updated messsage. 
